name: refactoring
description: Code cleanup and improvement workflow
version: "1.0"

parameters:
  - name: target_files
    description: Files or patterns to refactor
    required: true
  - name: refactoring_goal
    description: Goal of the refactoring (performance, readability, etc.)
    required: true
  - name: preserve_api
    description: Whether to preserve public API compatibility
    type: boolean
    default: true

parallel_groups:
  analysis_checks:
    description: Parallel code analysis
    agents:
      - static-analyzer
      - complexity-analyzer
      - dependency-analyzer

steps:
  - name: baseline_tests
    type: bash
    command: "pytest -v"
    description: "Establish baseline test suite (must pass)"
    required: true
    output_var: "baseline_results"
  
  - name: context_analysis
    agent: context-synth
    description: "Analyze current code structure"
    params:
      files: "{{parameters.target_files}}"
    output_var: "code_context"
  
  - name: parallel_analysis
    type: parallel_group
    group: analysis_checks
    description: "Analyze code quality and structure"
    inputs:
      - "{{code_context}}"
      - "{{parameters.target_files}}"
    output_var: "analysis_results"
  
  - name: refactoring_plan
    agent: cleaner
    description: "Create refactoring plan"
    inputs:
      - "{{code_context}}"
      - "{{analysis_results}}"
      - "{{parameters.refactoring_goal}}"
      - "{{parameters.preserve_api}}"
    output_var: "refactoring_plan"
  
  - name: architectural_review
    agent: architect
    description: "Review refactoring plan for architectural impact"
    inputs:
      - "{{refactoring_plan}}"
      - "{{code_context}}"
    output_var: "architecture_approval"
  
  - name: incremental_refactoring
    description: "Perform refactoring in small increments"
    type: loop
    condition: "until_plan_complete"
    max_iterations: 20
    substeps:
      - name: apply_refactoring_step
        agent: cleaner
        description: "Apply next refactoring step"
        inputs:
          - "{{refactoring_plan}}"
          - "{{current_step}}"
        output_var: "refactored_code"
      
      - name: test_after_step
        type: bash
        command: "pytest -v"
        description: "Verify tests still pass after refactoring step"
        output_var: "step_test_results"
      
      - name: rollback_on_failure
        agent: main
        condition: "on_test_failure"
        action: "rollback"
        description: "Rollback step if tests fail"
        inputs:
          - "{{step_test_results}}"
  
  - name: final_cleanup
    agent: cleaner
    description: "Final cleanup and optimization"
    inputs:
      - "{{refactored_code}}"
    output_var: "final_code"
  
  - name: comprehensive_testing
    type: bash
    command: "pytest -v --cov"
    description: "Run comprehensive test suite with coverage"
    output_var: "final_test_results"
  
  - name: quality_verification
    type: parallel_group
    group: analysis_checks
    description: "Verify improved code quality"
    inputs:
      - "{{final_code}}"
    output_var: "quality_metrics"
  
  - name: refactoring_review
    agent: reviewer
    description: "Review refactoring results"
    inputs:
      - "{{final_code}}"
      - "{{quality_metrics}}"
      - "{{refactoring_plan}}"
      - "{{final_test_results}}"
    output_var: "refactoring_review"

success_criteria:
  - all_tests_pass: true
  - quality_improved: true
  - api_compatibility_maintained: "{{parameters.preserve_api}}"

state_tracking:
  - refactoring_progress
  - test_status
  - quality_metrics